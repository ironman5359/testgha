name: Complex CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - '*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Which environment to deploy to'
        required: true
        default: 'development'
      deploy:
        description: 'Run deployment steps'
        required: false
        default: 'false'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Lint code
        run: npm run lint

  test:
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node: ['12', '14', '16']
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node }}-

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results-${{ matrix.os }}-node-${{ matrix.node }}
          path: output/*.test

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: user/app:latest

  deploy:
    needs: build
    if: ${{ github.event.inputs.deploy == 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Kubernetes
        run: kubectl apply -f deployment.yaml
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.15.0
        with:
          channel-id: 'C1234567890'
          slack-message: 'Deployment to ${{ github.event.inputs.environment }} completed successfully!'
